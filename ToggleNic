if not A_IsAdmin ;The script needs elevated privileges to be able to use COM.
{
	Run *RunAs "%A_ScriptFullPath%"
	ExitApp
}
#NoEnv
#Persistent
#NoTrayIcon
#SingleInstance off
DetectHiddenWindows, on
SetWorkingDir %A_ScriptDir%
SetBatchLines, -1
SetWinDelay, -1
;--------------------------Script Functions--------------------------
;Function, COM method to disable the default networkdevice. The device is toggled on/off by it's ID_number stored in variable DevId.
DisableNic(DevId)
{
	objWMIService := ComObjGet("winmgmts:\\" & strComputer & "\root\CIMV2").ExecMethod("Win32_NetworkAdapter.DeviceID='" DevId "'","Disable")
	return
}
;Function, COM method to enable the default networkdevice.
EnableNic(DevId)
{
	objWMIService := ComObjGet("winmgmts:\\" & strComputer & "\root\CIMV2").ExecMethod("Win32_NetworkAdapter.DeviceID='" DevId "'","Enable")
	return
}
;WMI query function to get network information.
GetIpInfo()
{
	objWMIService := ComObjGet("winmgmts:\\.\root\CIMV2")
	Enum := objWMIService.ExecQuery("SELECT * FROM Win32_NetworkAdapterConfiguration")._NewEnum
	while enum[value]{
		IPAddress := value.IPAddress
		global	ipv4 := IPAddress[0]
		IPSubnet := value.IPSubnet
		global Subnet := IPSubnet[0]
		global	MACAddress := value.MACAddress
	}
return
}
;Funtion to get all onboard physical network apaters. It gets the name and index number then writs them back to .ini.
GetPhysicalAdapter()
{
	objWMIService := ComObjGet("winmgmts:\\.\root\CIMV2")
	enum := objWMIService.ExecQuery("SELECT * FROM Win32_NetworkAdapter where PhysicalAdapter = true")._NewEnum
	while enum[value]{
		DeviceID := value.DeviceID
		Name := value.Name
		IniWrite, %DeviceID%, %A_ScriptDir%\Settings.ini, Devices, DeviceID%A_index%
		IniWrite, %Name%, %A_ScriptDir%\Settings.ini, Devices, DeviceName%A_index%
	}
return
}
;--------------------------On First run ore deletion of NetAccess.acc--------------------------
;Getting icons for systray and asking user te specify default network device (the one that's connected to the internet).
IfnotExist, %A_ScriptDir%\NetAccess.acc
{
	FileDelete, %A_ScriptDir%\Settings.ini
	GetPhysicalAdapter()
	;Checking if operating system is windows10 ore not. Icons are only tested on win10 and 7.
	OsVersion:=DllCall("GetVersion", "uint") & 0xffff
	If(OsVersion = 10 ){
		IconFile=pnidui.dll
		IconEnabled:=13
		IconDisabled:=1
	}Else{
		IconFile=pnidui.dll
		IconEnabled:=28
		IconDisabled:=13
	}
	;Imporing name objects and variable value's in section [Devices] from ini.
	Array := Object()
	Loop, read, %A_ScriptDir%\Settings.ini
	{
		If(A_LoopReadLine != "")
		{
			StrRepl := StrReplace(A_LoopReadLine, "[Devices]", "", All)
			Loop, parse, StrRepl,  =,
			{
				int++
				Array.Obj[int] := A_LoopField
			}
		}
		;Adding found device names to variables for use in dropdownlist.
		DevName1:=Array.Obj[4]
		DevName2:=Array.Obj[8]
		DevName3:=Array.Obj[12]
		DevName4:=Array.Obj[16]
	}
	;Dropdownlist to choose the default device to be auto toggled by applications.
	while(FirstRun = "")
	{
		Gui, Add, DropDownList, x12 y12 w345 h125 vSelect, Name = %DevName1%||Name = %DevName2%|Name = %DevName3%|Name = %Devname4%
		Gui, Add, Button, x367 y12 w96 h19, Ok
		Gui, Show, w478 h45,
		pause, on
	
		ButtonOk:
		Pause, off
		GuiControl,+AltSubmit, Select
		Gui, submit 
		Gui, destroy
		Break
	}
	If(Select = 1)
	{
		DevID:=Array.Obj[2]
		Name:=Array.Obj[4]
	}
	Else If(Select = 2)
	{
		DevID:=Array.Obj[6]
		Name:=Array.Obj[8]
	}		
	Else If(Select = 3)
	{
		DevID:=Array.Obj[10]
		Name:=Array.Obj[12]
	}
	Else if(Select = 4)
	{
		DevID:=Array.Obj[14]
		Name:=Array.Obj[16]
	}
	;Writing value's back to files.
	IniWrite, %DevID%, %A_ScriptDir%\Settings.ini, DevToToggle, DevID
	IniWrite, %Name%, %A_ScriptDir%\Settings.ini, DevToToggle, Name
	IniWrite, %IconFile%, %A_ScriptDir%\Settings.ini, TrayIcon, IconFile
	IniWrite, %IconEnabled%, %A_ScriptDir%\Settings.ini, TrayIcon, IconEnabled
	IniWrite, %IconDisabled%, %A_ScriptDir%\Settings.ini, TrayIcon, IconDisabled
	
	FileAppend, ahk_exe firefox.exe, %A_ScriptDir%\NetAccess.acc
	FileAppend, `nahk_exe iexplore.exe, %A_ScriptDir%\NetAccess.acc
	FileAppend, `nahk_exe chrome.exe, %A_ScriptDir%\NetAccess.acc
	FileAppend, `nahk_exe opera.exe, %A_ScriptDir%\NetAccess.acc
}
;--------------------------Ini read and traymenu section--------------------------
IniRead, DevID, %A_ScriptDir%\Settings.ini, DevToToggle, DevID
IniRead, Name, %A_ScriptDir%\Settings.ini, DevToToggle, Name
IniRead, IconFile, %A_ScriptDir%\Settings.ini, TrayIcon, IconFile
IniRead, IconEnabled, %A_ScriptDir%\Settings.ini, TrayIcon, IconEnabled
IniRead, IconDisabled, %A_ScriptDir%\Settings.ini, TrayIcon, IconDisabled

Menu, tray, Icon
Menu, tray, Icon, %IconFile%, %IconDisabled%
Menu, tray, Tip, % "Ipv4 Address = " ipv4  "`n"
.				"Subnetmask = " Subnet "`n"
.				"MACAddress = " MACAddress "`n"
Menu, Tray, NoStandard
Menu, tray, add, Network Connections, Connections
Menu, tray, add, Windows Firewall, Firewall
Menu, tray, add, Configure allowed apps, allowed
Menu, tray, add
Menu, tray, add, Enable %Name%, TurnOn
Menu, tray, add, Disable %Name%, TurnOff
Menu, tray, add
Menu, tray, add, Restart script, Restart
Menu, tray, add, Exit, CloseScript
;--------------------------Settimer section, to check if there is a allowd app running ore not--------------------------
DisableAdapter:
IfWinNotExist, ahk_Group NetAccess ;On startup the window group does not exist, yet, so the script will alway's continue here.(True)
{
	Settimer, DisableAdapter, off
	DisableNic(DevID) ;Function as devined above.
	;The script waits here untill the variable ipv4 is empty. This will ensure the tray icon display's the true state of the device.
	while(ipv4 != "")
	{
		GetIpInfo() ;Function as devined above.
		sleep, 50
		if(ipv4 = "") ;Breaking free from the while loop as soon as ipv4 variable is empty
		{
			break
		}
	}
	;Adapting mouse over tooltip to new value's.
	Menu, tray, Tip, % "Ipv4 Address = " ipv4  "`n"
	.			"Subnetmask = " Subnet  "`n"
	.			"MACAddress = " MACAddress  "`n"
	Menu, tray, Icon
	Menu, tray, Icon, %IconFile%, %IconDisabled%
	;Reading file that's holding allowed apps, and adds them to the windowgroup NetAccess. Toggling the nic off/on will frefh the list. Removed apps will need a restart of the script.
	Loop, read, %A_ScriptDir%\NetAccess.acc
	{
		Loop, parse, A_LoopReadLine, %A_Tab%
		{
			GroupAdd, NetAccess, %A_LoopField%
		}
	}
	Settimer, EnableAdapter, 1000
}
return

EnableAdapter:
IfWinExist, ahk_Group NetAccess ;When a allowed application is started this will evaluate as true.
{
	Settimer, EnableAdapter, off
	EnableNic(DevID)
	while(ipv4 = "")
	{
		GetIpInfo()
		sleep, 50
		if(ipv4 != "")
		{
			break
		}
	}
	Menu, tray, Tip, % "Ipv4 Address = " ipv4 "`n"
	.			"Subnetmask = " Subnet "`n"
	.			"MACAddress = " MACAddress "`n"
	Menu, tray, Icon,
	Menu, tray, Icon, %IconFile%, %IconEnabled%
	Loop, read, %A_ScriptDir%\NetAccess.acc
	{
		Loop, parse, A_LoopReadLine, %A_Tab%
		{
			GroupAdd, NetAccess, %A_LoopField%
		}
	}
	Settimer, DisableAdapter, 1000
}
return
;--------------------------Button section--------------------------
;Opens Control Panel\Network and Internet\Network Connections.
Connections:
Run, %A_WinDir%\explorer.exe shell:::{26EE0668-A00A-44D7-9371-BEB064C98683}\3\::{7007ACC7-3202-11D1-AAD2-00805FC1270E}
return
;Opens Windows firewall with advanced security.
Firewall:
Run, "C:\WINDOWS\system32\mmc.exe" "C:\WINDOWS\system32\wf.msc"
return
;Opens notepad with the allowed application list.
allowed:
Run, notepad %A_ScriptDir%\NetAccess.acc
return
;Manualy turn off the network device.
TurnOff:
DisableNic(DevID)
while(ipv4 != "")
{
	GetIpInfo()
	sleep, 50
	if(ipv4 = "")
	{
		break
	}
}
Menu, tray, Tip, % "Ipv4 Address = " ipv4  "`n"
.   "Subnetmask = " Subnet  "`n"
.   "MACAddress = " MACAddress  "`n"
Menu, tray, Icon
Menu, tray, Icon, %IconFile%, %IconDisabled%
Return
;Manualy turn on the network device.
TurnOn:
EnableNic(DevID)
while(ipv4 = "")
{
	GetIpInfo()
	sleep, 50
	if(ipv4 != "")
	{
		break
	}
}
Menu, tray, Tip, % "Ipv4 Address = " ipv4 "`n"
.   "Subnetmask = " Subnet "`n"
.   "MACAddress = " MACAddress "`n"
Menu, tray, Icon,
Menu, tray, Icon, %IconFile%, %IconEnabled%
return
;Reloads the script. This is needed when the allowed application list needs a update. 
Restart:
Run *RunAs "%A_ScriptFullPath%"
CloseScript:
ExitApp
