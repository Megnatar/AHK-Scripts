;The script needs elevated privileges to be able to use the management interface.
if not A_IsAdmin
{
	Run *RunAs "%A_ScriptFullPath%"
	ExitApp
}
 
#NoEnv
#Persistent
#NoTrayIcon
#SingleInstance off
DetectHiddenWindows, on
SetWorkingDir %A_ScriptDir%
SetBatchLines, -1
 
;Declaring global variables. Better to have them all in once place than scattered throughout the script.
global UnitIn
global UnitOut
global BytesIn
global BytesOut
global DevId
Global ipv4 := 0
Global subnet := 0
Global mac := 0
 
;--------------------------Script Functions--------------------------
;COM method to disable the default network device. The device is toggled on/off by it's index number stored in variable DevId.
DisableNic(DevId)
{
	objWMIService := ComObjGet("winmgmts:\\" & strComputer & "\root\CIMV2").ExecMethod("Win32_NetworkAdapter.DeviceID='" DevId "'", "Disable")
	return
}
 
;COM method to enable the default network device.
EnableNic(DevId)
{
	objWMIService := ComObjGet("winmgmts:\\" & strComputer & "\root\CIMV2").ExecMethod("Win32_NetworkAdapter.DeviceID='" DevId "'","Enable")
	return
}
 
;WMI query to retrieve information about the default network device.
GetNicInfo()
{
	objItem := ComObjGet("winmgmts:\\.\root\CIMV2")
	for  value in objItem.ExecQuery("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE Index=" DevId)
	{
			ipv4 := value.IpAddress[0]
			subnet := value.IPSubnet[0]
			mac := value.MACAddress
	}
	return
}
 
;Function to get all installed physical network adapter. It retrieves the name and id/index number, then writes them back to Settings.ini.
GetPhysicalAdapter()
{
	objWMIService := ComObjGet("winmgmts:\\.\root\CIMV2")
	enum := objWMIService.ExecQuery("SELECT * FROM Win32_NetworkAdapter where PhysicalAdapter = true")._NewEnum
	while enum[value]
	{
		DeviceID := value.DeviceID
		Name := value.Name
 
		IniWrite, %DeviceID%, %A_ScriptDir%\Settings.ini, Devices, DeviceID%A_index%
		sleep, 10
		IniWrite, %Name%, %A_ScriptDir%\Settings.ini, Devices, DeviceName%A_index%
		sleep, 10
	}
	return
}
 
;D/U meter function.
BandWidthMeter()
{
    objItem := ComObjGet("winmgmts:\\.\root\CIMV2")
    for  value in objItem.ExecQuery("SELECT * FROM Win32_PerfFormattedData_Tcpip_NetworkInterface WHERE Name=" "Name")
    {
        BytesIn := Value.BytesReceivedPersec
        BytesOut := Value.BytesSentPersec
	}
	Sleep, 10
	;Unit converter. The value's are converted from raw data(binary) to bytes by windows. Here there
	;conferted from bytes to KilloBytes at first, and to MegaBytes when needed.
	If(BytesIn < 1048576)
	{
		UnitIn := "KiB/s"
		BytesIn := BytesIn*0.0009765625
	}
	sleep, 10	
	;Converting to megabytes when the number in var BytesIn is equal or greater then 1MB
	 If(BytesIn >= 1048576)
	{
		UnitIn := "MB/s"
		BytesIn := BytesIn*9.5367431640625e-7
	}
	Sleep, 10
 
	If(BytesOut < 1048576)
	{
		UnitOut := "KiB/s"
		BytesOut := BytesOut*0.0009765625
	}
	sleep, 10
	 If(BytesOut >= 1048576)
	{
		UnitOut := "MB/s"
		BytesOut := BytesOut*9.5367431640625e-7
	}
	Sleep, 10
	;Rounding vars BytesIn and Out down to two decal point.
	BytesIn := Round(BytesIn, 2)
	BytesOut := Round(BytesOut, 2)
    Return
}
 
;--------------------------On first run or deletion of file NetAccess.acc or Settings.ini--------------------------
;Checking OS version so the right icons are used. Asking user to specify the default network device (the one that's connected to the internet).
IfnotExist %A_ScriptDir%\Settings.ini
	FileDelete, %A_ScriptDir%\NetAccess.acc
IfnotExist, %A_ScriptDir%\NetAccess.acc
{
	IfExist Settings.ini
		FileDelete, %A_ScriptDir%\Settings.ini
	GetPhysicalAdapter()
 
	;Checking if operating system is windows10 or not. Icons are only tested on win10 and 7.
	If(A_OSVersion >= 10 ){
		IconFile=pnidui.dll
		IconEnabled:=13
		IconDisabled:=1
	}Else{
		IconFile=pnidui.dll
		IconEnabled:=28
		IconDisabled:=13
	}
	/*
	Importing name/key's objects and variable value's in section [Devices] from ini.
	I wil probably change this in future release with a enum in GetPhysicalAdapter()
	that writes [key, value] in one go.
	*/ 
	Array := Object()
	Loop, read, %A_ScriptDir%\Settings.ini
	{
		If(A_LoopReadLine != "")
		{	;Excluding section name from A_LoopReadLine. The resulting lines will be stored in StrRepl.
			;Why no iniread? Then i did not learn something :D
			StrRepl := StrReplace(A_LoopReadLine, "[Devices]", "", All)
			Loop, parse, StrRepl,  =,
			{
				int++
				Array.Obj[int] := A_LoopField
				sleep, 10
			}
		}
 
		;Adding found device names to variables for use in dropdownlist.
		DevName1:=Array.Obj[4]
		DevName2:=Array.Obj[8]
		DevName3:=Array.Obj[12]
		DevName4:=Array.Obj[16]
	}
 
	;Drop down list to choose the default device that will be auto toggled by some application.
	while(FirstRun = "")
	{
		Gui, Add, DropDownList, x12 y12 w345 h125 vSelect, Name = %DevName1%||Name = %DevName2%|Name = %DevName3%|Name = %Devname4%
		Gui, Add, Button, x367 y12 w96 h19, Ok
		Gui, Show, w478 h45,
		pause, on
 
		ButtonOk:
		Pause, off
		GuiControl,+AltSubmit, Select
		Gui, submit 
		Gui, destroy
		Break
	}
 
	If(Select = 1)
	{	;The value found in the second object in the array [2] will be stored in DevID. For name that will be the fourth [4]..etc.
		DevID:=Array.Obj[2]
		Name:=Array.Obj[4]
	}
	If(Select = 2)
	{
		DevID:=Array.Obj[6]
		Name:=Array.Obj[8]
	}		
	If(Select = 3)
	{
		DevID:=Array.Obj[10]
		Name:=Array.Obj[12]
	}
	if(Select = 4)
	{
		DevID:=Array.Obj[14]
		Name:=Array.Obj[16]
	}
 
	;Writing value's back to Settings.ini.
	IniWrite, %DevID%, %A_ScriptDir%\Settings.ini, DevToToggle, DevID
	sleep, 10
	IniWrite, %Name%, %A_ScriptDir%\Settings.ini, DevToToggle, Name
	sleep, 10
	IniWrite, %IconFile%, %A_ScriptDir%\Settings.ini, TrayIcon, IconFile
	sleep, 10
	IniWrite, %IconEnabled%, %A_ScriptDir%\Settings.ini, TrayIcon, IconEnabled
	sleep, 10
	IniWrite, %IconDisabled%, %A_ScriptDir%\Settings.ini, TrayIcon, IconDisabled
	sleep, 10
 
	;Creating file (NetAccess.acc) this file holds the list with applications that need network access.
	FileAppend, ahk_exe firefox.exe, %A_ScriptDir%\NetAccess.acc
	FileAppend, `nahk_exe iexplore.exe, %A_ScriptDir%\NetAccess.acc
	FileAppend, `nahk_exe chrome.exe, %A_ScriptDir%\NetAccess.acc
	FileAppend, `nahk_exe opera.exe, %A_ScriptDir%\NetAccess.acc
}
 
;--------------------------Ini read and traymenu section--------------------------
IniRead, DevID, %A_ScriptDir%\Settings.ini, DevToToggle, DevID
IniRead, Name, %A_ScriptDir%\Settings.ini, DevToToggle, Name
IniRead, IconFile, %A_ScriptDir%\Settings.ini, TrayIcon, IconFile
IniRead, IconEnabled, %A_ScriptDir%\Settings.ini, TrayIcon, IconEnabled
IniRead, IconDisabled, %A_ScriptDir%\Settings.ini, TrayIcon, IconDisabled
 
;Creating tray menu
Menu, Tray, NoStandard
Menu, tray, Tip, % 	"IpAddress = " ipv4 "`n"
.				"SubnetMask = " subnet "`n"
.				"MACAddress = " mac "`n"
Menu, tray, Icon
Menu, tray, Icon, %IconFile%, %IconDisabled%
Menu, tray, add, Network Connections, Connections
Menu, tray, add, Windows Firewall, Firewall
Menu, tray, add, Configure allowed apps, allowed
Menu, tray, add
;Adding submenu  for menu option ToggleNic Manually
menu, ToggleNic, add, Enable %Name%, TurnOn
menu, ToggleNic, add, Disable %Name%, TurnOff
Menu, tray, add, ToggleNic Manually, :ToggleNic
Menu, tray, add
Menu, tray, add, Enable D/U Meter, DuMeter
Menu, tray, add, Restart script, Restart
Menu, tray, add, Exit, CloseScript
 
;--------------------------Settimer section, to check if there is a allowed app running or not--------------------------
DisableAdapter:
;On startup the window group does not exist, yet, so the script will always continue here and disables you're device.
IfWinNotExist, ahk_Group NetAccess
{
	Settimer, DisableAdapter, off
	Toggle := "Disable"
	DisableNic(DevID)
	;Looping while the value in ipv4 is equal or greater then 1. This will ensure the tray icon display's the true state of the device.
	while(ipv4 >= 1)
	{
		GetNicInfo()
		;Breaking free from the while loop when the value in ipv4 variable becomes zero.
		if(ipv4 = 0)
		{
			mac := 0
			break
		}
	}
	;Updating mouse over tooltip to new value's. Changing tray icon to display current status.
	Menu, tray, Tip, %	"IpAddress = " ipv4 "`n"
	.				"SubnetMask = " subnet "`n"
	.				"MACAddress = " mac "`n"
	Menu, tray, Icon
	Menu, tray, Icon, %IconFile%, %IconDisabled%
 
	;Reading file that is holding allowed apps, and adds them to the windowgroup NetAccess.
	;Better to replace GroupAdd with a array so the script can bove add and remove applications to the list without restarting.
	Loop, read, %A_ScriptDir%\NetAccess.acc
	{
		Loop, parse, A_LoopReadLine, %A_Tab%
		{
			GroupAdd, NetAccess, %A_LoopField%
		}
	}
	Settimer, EnableAdapter, 1000
}
return
 
EnableAdapter:
;When one of the applications in the list NetAccess.acc is running, this will evaluate as true.
IfWinExist, ahk_Group NetAccess
{
	Settimer, EnableAdapter, off
	EnableNic(DevID)
 
	while(ipv4 = 0)
	{
		GetNicInfo()
		if(ipv4 >= 1)
		{
			break
		}
	}
	Menu, tray, Tip, %	"IpAddress = " ipv4 "`n"
	.				"SubnetMask = " subnet "`n"
	.				"MACAddress = " mac "`n"
	Menu, tray, Icon,
	Menu, tray, Icon, %IconFile%, %IconEnabled%
 
	Loop, read, %A_ScriptDir%\NetAccess.acc
	{
		Loop, parse, A_LoopReadLine, %A_Tab%
		{
			GroupAdd, NetAccess, %A_LoopField%
		}
	}
	Settimer, DisableAdapter, 1000
}
return
 
;--------------------------Tray menu lables and there actions--------------------------
DuMeter:
if(MenuNew != "Disable D/U Meter"){
	MenuOld = Enable D/U Meter
	MenuNew = Disable D/U Meter
 
	;Creating timed subroutine and allready enabling the times, so when the gui is done drawing the
	;value's for the bandwidth can be displayed rightaway.
	Settimer, UpdPerfdata, 500
	BandWidthMeter()
 
	IniRead, xPoss, Settings.ini, GuiPoss, xPoss, Center
	IniRead, yPoss, Settings.ini, GuiPoss, yPoss, Center
	;Du meters window.
	Gui +Owner +AlwaysOnTop -Caption -SysMenu
	Gui, Margin, 2, 2
	Gui, font, s9 w700 ce4e4c4 q5, lucon
	Gui, Add, Text, w50 r1 gDrag vBytesIn, D: %BytesIn%
	Gui, Add, Text, x+0 yp w30 gDrag vUnitIn, %UnitIn%
	Gui, Add, Text, w50 xm r1 gDrag vBytesOut, U: %BytesOut%
	Gui, Add, Text, x+0 yp w30 gDrag vUnitOut, %UnitOut%
	Gui, color, 333333
	Gui, Show, x%xPoss% y%yPoss%, Layer
	WinSet, Transparent, 200, Layer
}Else{
	MenuOld = Disable D/U Meter
	MenuNew = Enable D/U Meter
 
	Settimer, UpdPerfdata, Off
 
	WinGetPos, xPoss, yPoss, , ,Layer
	IniWrite, %xPoss%, Settings.ini, GuiPoss , xPoss
	sleep, 10
	IniWrite, %yPoss%, Settings.ini, GuiPoss,yPoss
	sleep, 10
	Gui, Destroy
}
menu, tray, rename, %MenuOld%, %MenuNew%
return
 
UpdPerfdata:
BandWidthMeter()
GuiControl, , BytesIn, D: %BytesIn%
GuiControl, , UnitIn, %UnitIn%
GuiControl, , BytesOut, U: %BytesOut%
GuiControl, , UnitOut, %UnitOut%
return
 
;msg 0xA1 = WM_NCLBUTTONDOWN, wParam = 2, lParam = 0 (so is excluded)
Drag:
Settimer, UpdPerfdata, off
PostMessage, 0xA1, 2, , ,Layer 
Keywait, Lbutton
Settimer, UpdPerfdata, on
WinGetPos, xPoss, yPoss, , ,Layer
IniWrite, %xPoss%, Settings.ini, GuiPoss , xPoss
IniWrite, %yPoss%, Settings.ini, GuiPoss,yPoss
return
 
;Open Control Panel\Network and Internet\Network Connections.
Connections:
Run, %A_WinDir%\explorer.exe shell:::{26EE0668-A00A-44D7-9371-BEB064C98683}\3\::{7007ACC7-3202-11D1-AAD2-00805FC1270E}
return
 
;Open Windows firewall with advanced security.
Firewall:
Run, "C:\WINDOWS\system32\mmc.exe" "C:\WINDOWS\system32\wf.msc"
return
 
;Open notepad with the allowed application list.
allowed:
Run, notepad %A_ScriptDir%\NetAccess.acc
return
 
;Manualy turn off the network device.
TurnOff:
DisableNic(DevID)
 
while(ipv4 >= 1)
{
	GetNicInfo()
	if(ipv4 = 0)
	{
		break
	}
}
Menu, tray, Tip, %	"IpAddress = " ipv4 "`n"
.				"SubnetMask = " subnet "`n"
.				"MACAddress = " mac "`n"
Menu, tray, Icon,
Menu, tray, Icon, %IconFile%, %IconDisabled%
 
Loop, read, %A_ScriptDir%\NetAccess.acc
{
	Loop, parse, A_LoopReadLine, %A_Tab%
	{
		GroupAdd, NetAccess, %A_LoopField%
	}
}
Return
 
;Manualy turn on the network device.
TurnOn:
EnableNic(DevID)
 
while(ipv4 = 0)
{
	GetNicInfo()
	if(ipv4 >= 1)
	{
		break
	}
}
Menu, tray, Tip, %	"IpAddress = " ipv4 "`n"
.				"SubnetMask = " subnet "`n"
.				"MACAddress = " mac "`n"
Menu, tray, Icon,
Menu, tray, Icon, %IconFile%, %IconEnabled%
 
Loop, read, %A_ScriptDir%\NetAccess.acc
{
	Loop, parse, A_LoopReadLine, %A_Tab%
	{
		GroupAdd, NetAccess, %A_LoopField%
	}
}
return 
/*
Reloads the script. This is only needed when a application is removed from allowed application list.
Since autohotkey does not support Group, remove, SomeWinGroup, Application.exe.
This option can also be used when a new application is added to the window group. 
But manually toggling the device on/off will also update the window group. Thus making the app 
known to the script.
*/
Restart:
Run *RunAs "%A_ScriptFullPath%"
CloseScript:
ExitApp
Return
 
;Default action for when the x button is clicked in the dropdownlist.
GuiClose:
IfExist, Settings.ini
FileDelete, %A_ScriptDir%\Settings.ini
IfExist, NetAccess.acc
FileDelete, %A_ScriptDir%\NetAccess.acc
ExitApp
