/*
[Variables]
AppToRun=
Path=
ExeFile=
WinTitle=
WinClass=
SteamID=
Admin=False
ScriptEnabled=No
[GuiPoss]
xPoss=751
yPoss=292
*/
;--------------------------Auto Execute Section. Ends where first return is encountered--------------------------
#NoEnv                                      ;Empty variables will not be checked if there system environment variables.
#Persistent                                 ;Script may not close until it receives a ExitApp command.
#NoTrayIcon                                 ;Switching tray icon off until the application to work with is started.
#KeyHistory 0                               ;Not needed when only running the script.
#Warn, all, StdOut                      ;All known error to standard output
#SingleInstance off                         ;The script is allowed to run multiple instances of itself
ListLines, off                              ;Not needed when only running the script.
SetTitleMatchMode, 3                        ;Variables for wintitle must be a exact match to the value in parameter window title. Whatever it's ahk_exe, ahk_class, ahk_id, etc it must exactly match!
SendMode, Input                             ;Send command uses the input method. The SetKeyDelay is ignored by SendInput and send in this case.
SetKeyDelay, 100, 50                        ;Delay for sending keystrokes and press duration time. For use with the SendEvent command.
SetBatchLines, -1                           ;Never sleep script in between execution, 'while its running'. Maximum CPU clock.
SetWorkingDir, %A_ScriptDir%                ;Set the script to use it's full folder path as it's working directory. In variable A_ScriptDir, the last backslash is excluded.

;--------------------------Place global variables here--------------------------

;--------------------------Reading variables and adding there content--------------------------
IfExist, %A_ScriptName%
{
    IniRead, AppToRun, %A_ScriptName%, Variables, AppToRun
    IniRead, Path, %A_ScriptName%, Variables, Path
    IniRead, ExeFile, %A_ScriptName%, Variables, ExeFile
    IniRead, WinTitle, %A_ScriptName%, Variables, WinTitle
    IniRead, WinClass, %A_ScriptName%, Variables, WinClass
    IniRead, SteamID, %A_ScriptName%, Variables, SteamID
    IniRead, ScriptEnabled, %A_ScriptName%, Variables, ScriptEnabled
 
    IniRead, xPoss, %A_ScriptName%, GuiPoss, xPoss
    IniRead, yPoss, %A_ScriptName%, GuiPoss, yPoss
    
    IniRead, Admin, %A_ScriptName%, Variables, Admin
}
If(Admin = "True"){
    gosub, ButtonRunAsAdmin
}

;--------------------------Asking for user input when variable 'AppToRun' at the top of this script is blank--------------------------
again:
If(AppToRun = "")                   ;Checking if AppToRun is empty.
{
    InputBox, AppToRun, , Specify path and executable name of the program you want to start. e.g. "x:\folder\file.exe",,600,130,,,,,
    If(ErrorLevel = 1)              ;The user pressed cancel
    {
        Exitapp
    }
    Else if(ErrorLevel = 0)
    { 
        If(AppToRun = "")
        {
            MsgBox, , , You pressed ok`, but nothing was specified!`nPlease try again, 5
            gosub, Again
            return
        }
        Else if(AppToRun != "")
        {
            RegExMatch(AppToRun, "[\w](.*\\)", Path)                        ;RegEx filter for extracting the path to the application from variable 'AppToRun' and putting it in new variable 'Path'
            RegExMatch(AppToRun, "[\s\w]+[.][\w]*", ExeFile)                ;RegEx filter for extracting the filename and extension from variable 'AppToRun'. Placing it in new variable 'ExeFile'
                                                                    	    ;This second filter is not depended on type of file, extension.
                                                                                                                       
            IniWrite, %AppToRun%, %A_ScriptName%, Variables, AppToRun
            IniWrite, %Path%, %A_ScriptName%, Variables, Path
            IniWrite, %ExeFile%, %A_ScriptName%, Variables, ExeFile
           
            IniRead, AppToRun, %A_ScriptName%, Variables, AppToRun     	    ;Getting the value for 'AppToRun' once more, otherwise the tray icon might fail at first run.
        }
    }
}
;--------------------------Creating tray menu and drawing script GUI--------------------------
Menu, tray, Icon  
Menu, tray, Icon, %AppToRun%
Menu, tray, add
Menu, tray, add, Quit Script and %WinTitle%, GuiClose

Gui +LastFound
Gui, Add, GroupBox, x3 y40 w316 h216 , 
Gui, Add, Text, x8 y5 w296 h36 vAppToRun, Path and executable name:`n%AppToRun%
Gui, Add, Text, x8 y56 w296 h36 VWinTitle, Window Title: `n%WinTitle%
Gui, Add, Text, x8 y108 w296 h36 VWinClass, WindowClass:`n%WinClass%
Gui, Add, Text, x8 y159 w296 h36, Admin Enabled:`n%Admin%
Gui, Add, Text, x8 y209 w296 h36 vScriptEnabled, Script is curently enabled:`n%ScriptEnabled%

Gui, Add, GroupBox, x2 y256 w316 h76
Gui, Add, Button, x8 y266 w76 h28, Start
Gui, Add, Button, x84 y266 w76 h28, Stop
Gui, Add, Button, x162 y266 w76 h28, Reset GUI
Gui, Add, Button, x239 y266 w76 h28, Exit Script
If(Admin != "True"){
   Gui, Add, Button, x8 y298 w76 h28, RunAsAdmin
}Else{
   Gui, Add, Button, x8 y298 w76 h28, RunasUser
}
Gui, Add, Button, x84 y298 w76 h28 , Open Folder
Gui, Add, Button, x239 y298 w76 h28 , Exit Application
Gui, Show, ,Application Launcher
Script_Gui:=WinExist()
return
;--------------------------Starting the program, getting WindowClass and title--------------------------
ButtonStart:
IfWinNotExist, ahk_exe %ExeFile%
{
    If(SteamID != "")                      ;This code will executed when the SteamID holds some value.
    {
        run, steam://rungameid/%SteamID%
        WinWait, ahk_exe %ExeFile%
        WinWaitActive, ahk_exe %ExeFile%
        WinGet, Process_ID, PID, ahk_exe %ExeFile%
    }
    Else if(SteamID = "")                   ;Below code is executed when variable SteamID empty.
    {
        run, %AppToRun%,%Path% , , Process_ID
        WinWait, ahk_pid %Process_ID%
        WinWaitActive, ahk_pid %Process_ID%
    }
    If(WinTitle = "")                        ;When variable WinTitle is empty, getting the window title and writing it back to the script for later use.
    {
        WinGetTitle, WinTitle, ahk_pid %Process_ID%, , Application Launcher
       
        GuiControl, , WinTitle, Window Title:`n%WinTitle%               ;Displaying/writing the new content of variable WinTitle in the GUI
        GuiControl, , WinClass, WindowClass:`n%WinClass%
        sleep, 10
        IniWrite, %WinTitle%, %A_ScriptName%, Variables, WinTitle       ;writing the new content of variable WinTitle back to the script for later use.
    }
    If(WinClass = "")                                                   ;Again with a blank variable, getting the window class and writing it back to the GUI and script for later use.
    {
        WinGetClass, WinClass
        GuiControl, , WinClass, WindowClass:`n%WinClass%
        Sleep, 10
        IniWrite, %WinClass%, %A_ScriptName%, Variables, WinClass
    }
}
else
IfWinExist, ahk_exe %ExeFile%                ;Activating the window if the program was already running.
{
    WinActivate, ahk_exe %ExeFile%
    WinWaitActive, ahk_exe %ExeFile%
    sleep, 10
    WinGet, Process_ID, PID, ahk_exe %ExeFile%
    sleep, 10
    If(WinTitle = "")
    {
        WinGetTitle, WinTitle, ahk_pid %Process_ID%, , Application Launcher
        GuiControl, , WinTitle, Window Title:`n%WinTitle%
        GuiControl, , WinClass, WindowClass:`n%WinClass%
        sleep, 10
        IniWrite, %WinTitle%, %A_ScriptName%, Variables, WinTitle
        sleep, 10
    }
    If(WinClass = "")
    {
        WinGetClass, WinClass
        GuiControl, , WinClass, WindowClass:`n%WinClass%
        Sleep, 10
        IniWrite, %WinClass%, %A_ScriptName%, Variables, WinClass
        sleep, 10
    }
}
GroupAdd, WindowGroup, ahk_class %WinClass%         ;Creating a window group in case variables mismatch or left blank. Also the context sensitive directive #IfWinActive/exist doesn't allow variables names.
GroupAdd, WindowGroup, ahk_exe %ExeFile%            ;With GroupAdd the parameter of the window title can be variable when using the #IfWin directive.

ScriptEnabled=Yes
SLEEP, 10
GuiControl, , ScriptEnabled, Script is curently enabled: `n%ScriptEnabled%
SLEEP, 10
Gui, Submit, NoHide
SLEEP, 10
Process, WaitClose, %Process_ID%
ScriptEnabled=No
GuiControl, , ScriptEnabled, Script is curently enabled: `n%ScriptEnabled%
Gui, Submit, NoHide
return
;--------------------------Section for the program you want the script to work/operate on--------------------------
;Operations will only execute on the window class or executable name. Opening some other window that happens hold/start with the same name as the window title will be ignored by the script.
#IfWinActive, ahk_group WindowGroup
{
/*
        DO SOMETHING HERE, LIKE SENDING SOME INPUT, GETTING APPLICATION RELATED VALUE'S, ORE MINIPULATE MEMORY.
*/
}
Return
;--------------------------Quit the program to work with--------------------------
ButtonExitApplication:
WinClose, ahk_pid %Process_ID%
sleep, 1000
WinGet, IsProcessClosed, PID, ahk_pid %Process_ID%
If(IsProcessClosed=Process_ID)
{
    WinKill, ahk_pid %Process_ID%           ;Forcing application to quit when if statement evaluated true.
}
Process_ID =
;skipping return here since the sctipt also need to stop execution it's program related functions.

;--------------------------Stop the script from operating on the program to work with--------------------------
ButtonStop:
WinGetPos, xPoss, yPoss, , , Application Launcher
sleep, 10
IniWrite, %xPoss%,  %A_ScriptName%, GuiPoss , xPoss
sleep, 10
IniWrite, %yPoss%, %A_ScriptName%, GuiPoss , yPoss
ScriptEnabled=No
GuiControl, , ScriptEnabled, Script is curently enabled:`n%ScriptEnabled%
Gui, Submit, NoHide
Run,  %A_ScriptFullPath%
ExitApp
return
;--------------------------Clear all variables, resetting the script to its defaults--------------------------
buttonResetGUI:
AppToRun=
Path=
ExeFile=
WinTitle=
WinClass=
SteamID=
Process_ID=
Admin=False
ScriptEnabled=No
IniWrite, %AppToRun%, %A_ScriptName%, Variables, AppToRun
sleep, 10
IniWrite, %Path%, %A_ScriptName%, Variables, Path
sleep, 10
IniWrite, %ExeFile%, %A_ScriptName%, Variables, ExeFile
sleep, 10
IniWrite, %WinClass%, %A_ScriptName%, Variables, WinClass
sleep, 10
IniWrite, %WinTitle%, %A_ScriptName%, Variables, WinTitle
sleep, 10
IniWrite, %Admin%, %A_ScriptName%, Variables, Admin
sleep, 10
IniWrite, %SteamID%, %A_ScriptName%, Variables, SteamID
sleep, 10
;Writing new content to the GUI window.
GuiControl, , WinTitle, Window Title: `n%WinTitle%
GuiControl, , WinClass, WindowClass:`n%WinClass%
GuiControl, , AppToRun, Path and executable name:`n%AppToRun%
GuiControl, , ScriptAdmin, Admin Enabled:`n%Admin%
GuiControl, , ScriptEnabled, Script is curently enabled:`n%ScriptEnabled%
Return

;--------------------------Run the script with administrative privileges --------------------------
/* Because of security reasons You should only enable this if the game/application does 
not except input from the scrip. I advice against running scripts as admin by default! 
It's very easy to messup you're Operating system.
*/
ButtonRunAsAdmin:
if not A_IsAdmin
{
    Admin = True
   IniWrite, %Admin%, %A_ScriptName%, Variables, Admin
    sleep, 10
    Run *RunAs "%A_ScriptFullPath%"
    ExitApp
}
Return
ButtonRunAsUser:
Admin = False
IniWrite, %Admin%, %A_ScriptName%, Variables, Admin
sleep, 10
Run  "%A_ScriptFullPath%"
ExitApp
Return
;--------------------------Opens the installation directory of the program to opereta on--------------------------
ButtonOpenFolder:
Run, Explorer.exe "%Path%"
Return
;--------------------------Writing variables. Exit script--------------------------
GuiClose:
ButtonExitScript:
WinGetPos, xPoss, yPoss, , , Application Launcher
sleep, 10
IniWrite, %AppToRun%, %A_ScriptName%, Variables, AppToRun
sleep, 10
IniWrite, %Path%, %A_ScriptName%, Variables, Path
sleep, 10
IniWrite, %ExeFile%, %A_ScriptName%, Variables, ExeFile
sleep, 10
IniWrite, %WinClass%, %A_ScriptName%, Variables, WinClass
sleep, 10
IniWrite, %WinTitle%, %A_ScriptName%, Variables, WinTitle
sleep, 10
IniWrite, %Admin%, %A_ScriptName%, Variables, Admin
sleep, 10
IniWrite, %SteamID%, %A_ScriptName%, Variables, SteamID
sleep, 10
IniWrite, %xPoss%,  %A_ScriptName%, GuiPoss , xPoss
sleep, 10
IniWrite, %yPoss%, %A_ScriptName%, GuiPoss , yPoss
sleep, 10
DllCall("AnimateWindow","UInt",Script_Gui,"Int",500,"UInt","0x90000")
ExitApp
