/* 
	This lbutton simulation is the most fast.
	It can be useful when, for instance a application has some feature mapped to a single click.
	But a "double click" or "double click down" does nothing. This can override the left click function of some
	programme and add extra features using "double click" or "double click down".

.
*/

+Lbutton::                  						       	; Shift+Lbutton
Lbutton::                                                                      	; Unless specified something else. A key label will start with key the being down.
State := GetKeyState((HotKey := RegExMatch(A_ThisHotkey, "i)[~!+^#]")), "P")   	; Store that state of the hotkey incase 20 ms are lost on the lines below. Also strip modifier keys from A_ThisHotkey and stores the result in variable hotkey.
BlOld := A_BatchLines                                                          	; Store current BatchLines setting.
SetBatchLines -1                                                               	; Set max reading speed for the script. Default is 10.

While(GetKeyState(HotKey, "P")) {                                              	; As long as the key is being pressed .....

   Send {Lbutton down}                                                        	; Send the a simulated lbutton down.
   KeyWait, HotKey                                                            	; And wait until our hotKey is released.

   If (!GetKeyState(HotKey, "P")) {                                           	; See if our key is indeed in a up state.
       Send {Lbutton up}                                                      	; Then also send Lbutton up.
       break                                                                  	; Break free from the while loop.
} }
if (!GetKeyState(HotKey, "P")) {                                               	; So the key is not pressed now.
   KeyWait, Lbutton, D T0.20                                                  	; Wait 200Ms for it to be pressed down again.
   If (ErrorLevel = 0) {                                                      	; Timeout will skip as soon the key is down. ErrorLevel is set to zero.
       While (GetKeyState(HotKey, "P")) {                                     	; This is a double click, the key was pressed down once more.
           Send {x down}{x up}                                                	; Do some extra stuff here.....

           while GetKeyState(HotKey, "P") {                                   	; While the HotKey was double clicked/tabbed and still is held down.
               KeyWait, HotKey                                                	; Wait for it, until it's released.
               send, {Lbutton up}                                             	; Send the simulated lbutton up again.
               Break                              
           }
           KeyWait, HotKey                                                    	; And wait for the key to be released.
           break                                                              	; Break free from the while loop. Not really needed although, "while" will evaluate one time less.
   } } else if (ErrorLevel = 1) {                                             	; If the key was not pushed down a second time. ErrorLel is set to 1, once the timeout period is over.
                                                                              	; Do some extra stuff here. But it will always come with a delay of 200ms after a single click.
}}
SetBatchLines % BlOld								; Restore previous value.
Return



; Older verion of Lbutton simulation. This one is slower because single click has a fixed delay of 200 ms

Lbutton:: 
KeyWait, Lbutton, D T0.20	;Here we make a single click as first action. This works best for Lbutton.
If errorlevel = 0		;As soon as Lbutton is down Errorlevel is set to zero. Send is trigger the moment Lbutton is pressed down
{
    Send, {Lbutton down}
    KeyWait, Lbutton		:And in this case we have here a click once and key down status.
    Send, {Lbutton up}
}
Else
KeyWait, Lbutton, T0.20		;When Lbutton is released from the first down status then here Errorlevel is set to zero
If errorlevel = 0		;The lines below are triggerd/evaluated in a blink of a eye
{
    KeyWait,Lbutton, D T0.20	;When Lbutton is pushed down again we have once more Errorlevel = 0, and a double click
    If errorlevel = 0
    {
        Send, {W down}		;When this would be used in a game, double click and holdind down the Lbutton
        KeyWait, Lbutton	;would couse W to push down. Mostly this wil make the camera move foreward
        Send, {w up}
    }
} 
return

;////////////////////////////////////////////////////////////////////////////////////////////////////////

Rbutton:: 
keywait, Rbutton, T0.20  		;Wait 200ms for Rbuttton to be released. If its released errorlevel is set to 0
If errorlevel = 0
{
	KeyWait,Rbutton, D T0.20 	;Waiting again to check if Rbutton is pushed down once more. True if errorlevel is set to 0 (must be a doubleclick then) 
	If errorlevel = 0
	{
		send {Rbutton down}{Rbutton up} ;Do something here when the button is double clicked
		send {Rbutton down}{Rbutton up}
	}
	Else				;Here errorlevel was set to 1, no double click so this a single click.
	If errorlevel = 1
	{
		send {Rbutton down}{Rbutton up}
	}

}
Else
if errorlevel = 1			;In the first keywait where errorlevel was 0. Here the command timed out (errorlevel 1), the key was not released so it must still be down
while GetKeyState("Rbutton", "P") 
{
	send {Rbutton down}		;Do something here as long as the key is pressed down.
	Keywait, Rbutton		;You need to make the script wait here for Rbutton to be released!, or else the while loop will flood window to where you're sending the key's to. It will likely crash.
	send {Rbutton up}		;Once Rbutton is release you need to send the key's up again.
	break
}
return

;//////////////////////////Toggle Key's//////////////////////////
;When the key you sending is already a toggle enabled key. Like shift down to hold possition.
;Dont try and use that key, change it in game to something like numpad0, because the game will likely 
;get confused about keystatus is up or down if you don't change it.


Xbutton2::	           		;Using keywait and errorlevel	
KeyWait, w, T
if  Not errorlevel 
send {w down}
Else
send {w up}
Return


Xbutton2::				;Using a variable and check against itself if its true or not.
If (Autorun := !Autorun) {
send {w down}
}Else{
send {w up}
}
Return

Xbutton2::				;Using a variable and ++/-- operator. Variable bAutorun might not declare properlay underfly.
If (bAutorun = 0) {			;Declare it in the auto-execution section!
    Send {W down}			;I prefer this toggle method since it's sollid.
    bAutorun++
}Else{
    Send {w up}
    bAutorun--
}
Return

;/////////////////////////////////Loop trough key's with each press/////////////////////////////////
;Mouse thumb button 1 Loops throught key's 1 2, and 3 with each press. Eatch click sends one key stroke.

Key := 1

XButton1::
If(Key >= 3)			;If variable key equals or is greater then 3, do whatever comes below.
{  
    Send, %Key%
    Key := Key-2
    return
}
else
If(Key := Key)			;If key is equal key, this will eveluate as true.
{
   Send, %Key%
   Key++
}
Return

/*
///////////////////////////////// PLEASE PAY ATTENTION  /////////////////////////////////
The examples below are not so good as the one's above. The below code is mostly bits and pieces from what
I learned from other's. But most of them have some form of delay wich makes them slow. The code at the top
is my own where I make use of Keywait and the fact that when ErrorLevel is set to zerro the code below is
executed right away. So there is zero to none timeout.
*/

;//////////////////////////Single, Double or Down key state //////////////////////////

~W::                    ;This will work best when single click is handled by the programe you use it on
if Counter =            
{                       
    	Counter++       
	KeyWait, w
	settimer, ClearCounter,
}
if Counter >= 1         ; W is pressed twice so SendEvent will send it's key's. Here that will be shift+w
{
	SendEvent, +{w} 
        Counter =       
        settimer, ClearCounter, off 
}
return

ClearCounter:
Counter =
settimer, ClearCounter, off
Return

;//////////////////////////////////////////////////////////////////////////////////////////
T::
keywait, T, T0.15
If errorlevel = 1
{
	Loop {
	LButtState := GetKeyState("T", "P")
	If (LButtState = 1)
		{
			MsgBox,,,Key is hold down,2
			KeyWait, T
			continue
		}
	If (LButtState = 0)
		{
			MsgBox key is released from down
			break
		}
	}
	return
}
else
keywait, T, D  T0.15
if errorlevel = 0
{
   MsgBox,,, Double click!,2	
}	
Return

 
 ;///////////////Same as above but with a while loop//////////////////
;Spacebar is used as the trigger key in these key examples.  

Space::
keywait, space, T0.25
if errorlevel = 1
{
	while GetKeyState("space", "P")
	{
        MsgBox key is down
	break
	}
return
}
else
keywait, space, D T0.2
if errorlevel = 0
{
    MsgBox double click
return
}
else
{
    MsgBox single click
}
return

 ;///////////////Same as above but the ~ prefix handles single click actions//////////////////
		
Lbutton:				 
keywait, Lbutton, T0.15
if errorlevel = 1 
{
    while GetKeyState("Lbutton", "P") 
    {
        send, +{w down}  	;Holding down the left mouse button wil also hold down Shift+w
        KeyWait, Lbutton 	;Waiting for lbutton to be released
    }
    send, +{w up} 
return 
}
else
keywait, Lbutton, D T0.15
if errorlevel = 0          
{
	SendEvent {space} ; Left click twice will send space	
    	return               
 }
SendEvent {Lbutton}
Return

;/////Same as above but in combination with a second key held down./////


AfterKeyRelease:
Secs++
Return

Space:: 
SetKeyDelay,20,20
keywait, Space, T0.25
if errorlevel = 1 
{
    While GetKeyState("Space", "P") 
    {		
        if  GetKeyState("Rbutton", "P")
        {
            KeyWait, Space, D
            MsgBox, 64, Click Actions, Rbutton and Space down:`n`nHolding down the right key button and pressing space key`, down or up depenig on keywait`, wil execute this part of the while loop. Handy for zooming`, aiming etc etc..., 30
		return
        }
        else
        {
        settimer, AfterKeyRelease, on
        KeyWait, Space
        settimer, AfterKeyRelease, off
        MsgBox, 64, Click Actions, Key down:`n`nThe Left button was down and again released after: %Secs% seconds`nHowever This part of the while loop was triggerd after 250ms .,30
        return
        }
    Break
    }
}  
else 
keywait, Space, D T0.35
if errorlevel = 0 
{
     MsgBox, 64, Click Actions, Double Click:`n`nSince neighter of the above conditions turns out to be true and a second click was detected with the "D"  option in keywait.,20
}
else
{
     MsgBox, 64, Click Actions, Single key Click:`n`nSince neighter of the above conditions turned out to be true., 10  
}
return

;

;//////////////////////////Single, Double or Tripple key state using timers //////////////////////////

MsgBoxTimeOut = 2
EveluationTime = 420
again = 1

Space::
if Counter 
{    
    Counter++
}
else
{
    Counter = 1
    SetTimer, CaptureKeyThread, %EveluationTime%
}
Return

CaptureKeyThread:
SetTimer, CaptureKeyThread, off
if Counter = 1
    {
        MsgBox,,,You pressed the key once.`n`nCan you press it twice?,%MsgBoxTimeOut%
    }
Else 
if Counter = 2
    {
        MsgBox,,,Yay you pressed the key twice.`n`nNow trie three times!,%MsgBoxTimeOut%
    }
Else 
if Counter = 3
    {        
    if again <= 3
        {
            MsgBox,,,You managed to press space 3 times once about every 140 milliseconds!.`nTry 4 times?`n`nThis attempt NR:%again%,%MsgBoxTimeOut%    
            again++
        }
        else 
        if again >= 4
        {
            MsgBox,,,Again only 3 key presses detected`nYou will never manage to hit 4 times within 420 Ms`nThough... try once more!,%MsgBoxTimeOut%
            EveluationTime = 800
        }
    }
Else 
if Counter > 3
    {

        MsgBox,,,420 milliseconds is to short for the tread to discover all the key presses!`nI've set the value of var EveluationTime to 800Ms. Timing is very importand!!!!`n`nThe script will exit after you press oke.
        gosub, ExitScript
    }
Counter =
Return

ExitScript:
ExitApp

;//////////////////////////Looping left/right clik if Lbutton is down//////////////////////////

Lbutton::
keywait, Lbutton, T0.40
if errorlevel = 1
{
    while GetKeyState("Lbutton", "P")  
    {
        send, {click down}{click up}
        sleep, 100
        send {click right down}{click right up}
        sleep, 100
    }
        keywait, Lbutton
    send, {click up}{click right up}
Return
}
if errorlevel = 0
{
	send {click}
}
return
